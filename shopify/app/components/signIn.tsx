import React, { useCallback, useEffect, useMemo, useState } from 'react';
import type { Hex } from 'viem';
import { useAccount, usePublicClient, useSignMessage } from 'wagmi';
import { SiweMessage } from 'siwe';


export function SignIn() {
  const [signature, setSignature] = useState<Hex | undefined>(undefined);
  const [valid, setValid] = useState<boolean | undefined>(undefined); 
  const client = usePublicClient(); 
  const { signMessage } = useSignMessage({ mutation: { onSuccess: (sig) => setSignature(sig) } });
  const account = useAccount();
 
  const message = useMemo(() => {
    return new SiweMessage({
      domain: document.location.host,
      address: account.address,
      chainId: account.chainId,
      uri: document.location.origin,
      version: '1',
      statement: 'Smart Wallet SIWE Example',
      nonce: '12345678', // replace with nonce generated by your backend
    });
  }, []);
 
  const checkValid = useCallback(async () => { 
    if (!signature || !account.address || !client) return; 
    const isValid = await client.verifyMessage({  
      address: account.address, 
      message: message.prepareMessage(), 
      signature, 
    }); 
    setValid(isValid); 
  }, [signature, account]); 
 
  useEffect(() => { 
    checkValid(); 
  }, [signature, account]); 
 
  const promptToSign = () => {
    signMessage({ message: message.prepareMessage() });
  };
  return (
    <div>
      <h2>SIWE Example</h2>
      <button onClick={promptToSign}>Sign In with Ethereum</button>
      {signature && <p>Signature: {signature}</p>}
      {valid !== undefined && <p>Is valid: {valid.toString()}</p>}
    </div>
  );
}